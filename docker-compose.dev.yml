version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: image_processor_web_dev
    volumes:
      - .:/app
      - /app/venv
      - /app/__pycache__
      - /app/app/__pycache__
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=wsgi:app
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - db
      - redis

  db:
    image: postgres:13-alpine
    container_name: image_processor_db_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-image_processor_dev}
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-image_processor_dev}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    container_name: image_processor_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes

  pgadmin:
    image: dpage/pgadmin4
    container_name: image_processor_pgadmin_dev
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - app-network
    depends_on:
      - db

  worker:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: image_processor_worker_dev
    command: celery -A app.tasks.celery_worker.celery worker --loglevel=info
    volumes:
      - .:/app
    environment:
      - FLASK_APP=wsgi:app
      - FLASK_ENV=development
    env_file:
      - .env
    depends_on:
      - redis
      - db
    networks:
      - app-network

  flower:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: image_processor_flower_dev
    command: celery -A app.tasks.celery_worker.celery flower --port=5555
    ports:
      - "5555:5555"
    volumes:
      - .:/app
    environment:
      - FLASK_APP=wsgi:app
      - FLASK_ENV=development
    env_file:
      - .env
    depends_on:
      - redis
      - worker
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
